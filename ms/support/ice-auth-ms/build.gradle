/*
 * The MIT License
 *
 * Copyright (c) 2016. OELABED
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

 buildscript {
    ext {
        SPRING_BOOT_VERSION = '1.4.0.RELEASE'
        SPRING_CLOUD = 'Camden.SR1'
        SONARQUBE_VERSION = '2.2'
        MYSQL_CONNECTOR_VERSION = '5.1.30'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://repo.spring.io/libs-snapshot-local'
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${SPRING_BOOT_VERSION}")
        classpath ("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${SONARQUBE_VERSION}")
    }
}

def microsGroup;
def microsVersion;
def microsName = 'ice-auth-ms'
def description = 'Authentification microservice' 


def Properties props = new Properties()
def propFile = file('../../ms.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))
    if (props!=null && props.containsKey('version.number')) {
        microsVersion = props['version.number']
        microsGroup = props['group.name']
    }
}


apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.sonarqube'


sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    baseName = microsName
    version = microsVersion
    group = microsGroup
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repo.spring.io/release/' }
    maven { url "http://repo.spring.io/libs-snapshot-local" }
    maven { url "http://repo.spring.io/libs-milestone-local" }
    maven { url "http://repo.spring.io/libs-release-local" }
}

dependencyManagement {
    imports {
        mavenBom ("org.springframework.cloud:spring-cloud-dependencies:${SPRING_CLOUD}")
    }
}

dependencies {

    // Spring Boot
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.security.oauth:spring-security-oauth2")
    compile("org.springframework.security:spring-security-jwt")

    // Spring Cloud
    compile("org.springframework.cloud:spring-cloud-config-client")
    compile("org.springframework.cloud:spring-cloud-starter-eureka")
    compile("org.springframework.cloud:spring-cloud-starter-bus-amqp")
    compile("org.springframework.cloud:spring-cloud-starter-oauth2")

    compile("mysql:mysql-connector-java:${MYSQL_CONNECTOR_VERSION}")

    // tag::actuator[]
    compile("org.springframework.boot:spring-boot-starter-actuator")
    // end::actuator[]

    // tag::tests[]
    testCompile("org.springframework.boot:spring-boot-starter-test")
    // end::tests[]
}

/**
 * UNIT TESTS
 */
test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

/**
* SONAR QUBE
*/

sonarqube {
    properties {
        property "sonar.projectName", "Java :: ${microsName} :: ${description}"
        property "sonar.projectKey", "${microsGroup}:${microsName}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}